{"version":3,"sources":["components/Business/Business.js","components/BusinessList/BusinessList.js","components/SearchBar/SearchBar.js","util/Yelp.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Business","business","this","props","googleLink","name","city","className","href","url","src","imageSrc","alt","address","state","zipCode","category","rating","reviewCount","React","Component","BusinessList","businesses","map","key","id","SearchBar","getSortByClass","sortByOption","sortBy","handleSortByChange","setState","term","location","searchYelp","handleTermChange","e","target","value","handleLocationChange","handleSearch","preventDefault","keyPressed","renderSortByOptions","Object","keys","sortByOptions","sortByOptionValue","onClick","bind","componentWillUnmount","onChange","placeholder","onKeyPress","Yelp","search","fetch","headers","Authorization","then","response","json","jsonResponse","image_url","address1","zip_code","categories","title","review_count","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ced25c83.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Business.css';\r\n\r\nclass Business extends React.Component {\r\n\trender() {\r\n\t\tconst business = this.props.business;\r\n\t\tconst googleLink = `https://www.google.com/maps/search/?api=1&query=${business.name}${business.city}`;\r\n\t\treturn (\r\n\t\t\t<div className=\"Business\">\r\n\t\t\t\t<div className=\"image-container\">\r\n\t\t\t\t\t<a href={business.url}>\r\n\t\t\t\t\t\t<img src={business.imageSrc} alt=\"\" />\r\n\t\t\t\t\t</a>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h2>\r\n\t\t\t\t\t<a href={googleLink}>{business.name}</a>\r\n\t\t\t\t</h2>\r\n\t\t\t\t<div className=\"Business-information\">\r\n\t\t\t\t\t<div className=\"Business-address\">\r\n\t\t\t\t\t\t<p>{business.address}</p>\r\n\t\t\t\t\t\t<p>{business.city}</p>\r\n\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t{business.state} {business.zipCode}\r\n\t\t\t\t\t\t</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className=\"Business-reviews\">\r\n\t\t\t\t\t\t<h3>{business.category}</h3>\r\n\t\t\t\t\t\t<h3 className=\"rating\">{business.rating}</h3>\r\n\t\t\t\t\t\t<p>{business.reviewCount} reviews</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Business;\r\n","import React from 'react';\r\nimport './BusinessList.css';\r\nimport Business from './../Business/Business';\r\n\r\nclass BusinessList extends React.Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<div className=\"BusinessList\">\r\n\t\t\t\t{this.props.businesses.map((business) => {\r\n\t\t\t\t\treturn <Business key={business.id} business={business} />;\r\n\t\t\t\t})}\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default BusinessList;\r\n","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\n\r\nclass SearchBar extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            term: \"\",\r\n            location: \"\",\r\n            sortBy: \"best_match\",\r\n        };\r\n        //the 'sort by' options\r\n        this.sortByOptions = {\r\n            \"Best Match\": \"best_match\",\r\n            \"Highest Rated\": \"rating\",\r\n            \"Most Reviewed\": \"review_count\",\r\n        };\r\n        //bind this\r\n        this.handleTermChange = this.handleTermChange.bind(this);\r\n        this.handleLocationChange = this.handleLocationChange.bind(this);\r\n        this.handleSearch = this.handleSearch.bind(this);\r\n        this.keyPressed = this.keyPressed.bind(this);\r\n    }\r\n\r\n    //this method provides feedback to which 'sort by' has been selected by returning CSS class for a sorting option\r\n    getSortByClass = (sortByOption) => {\r\n        return this.state.sortBy === sortByOption ? \"active\" : \"\";\r\n    };\r\n\r\n    //this method sets the state of a sorting option when clicked. This method is tied to onClick of list item in renderSortByOptions\r\n    //added function to searchYelp if both input fields have been filled\r\n    handleSortByChange = (sortByOption) => {\r\n        this.setState({ sortBy: sortByOption });\r\n        if (this.state.term !== \"\" && this.state.location !== \"\") {\r\n            this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        }\r\n    };\r\n\r\n    //accepts user input for \"Search Business\" and changes state for this.state.term\r\n    handleTermChange = (e) => {\r\n        this.setState({ term: e.target.value });\r\n    };\r\n\r\n    //accepts user input for \"where\" and changes state for this.state.location\r\n    handleLocationChange = (e) => {\r\n        this.setState({ location: e.target.value });\r\n    };\r\n\r\n    //runs the searchYelp method in App.js when button is clicked\r\n    handleSearch = (e) => {\r\n        this.props.searchYelp(this.state.term, this.state.location, this.state.sortBy);\r\n        e.preventDefault();\r\n    };\r\n\r\n    //runs handleSearch when Enter is pressed on location input\r\n    keyPressed = (e) => {\r\n        if (e.key === \"Enter\") {\r\n            this.handleSearch(e);\r\n        }\r\n    };\r\n\r\n    //this method renders the <li> list of 'sort by' options above the inputs\r\n    renderSortByOptions = () => {\r\n        return Object.keys(this.sortByOptions).map((sortByOption) => {\r\n            let sortByOptionValue = this.sortByOptions[sortByOption];\r\n            return (\r\n                <li\r\n                    //onClick value needs to be binded to 'this' with bind() method.\r\n                    onClick={this.handleSortByChange.bind(this, sortByOptionValue)}\r\n                    className={this.getSortByClass(sortByOptionValue)}\r\n                    key={sortByOptionValue}\r\n                >\r\n                    {sortByOption}\r\n                </li>\r\n            );\r\n        });\r\n    };\r\n\r\n    componentWillUnmount = () => {\r\n        this.setState({ term: \"\", location: \"\" });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"SearchBar\">\r\n                <div className=\"SearchBar-sort-options\">\r\n                    <ul>{this.renderSortByOptions()}</ul>\r\n                </div>\r\n                <div className=\"SearchBar-fields\">\r\n                    <input onChange={this.handleTermChange} placeholder=\"Search Businesses\" value={this.state.term} />\r\n                    <input\r\n                        onChange={this.handleLocationChange}\r\n                        onKeyPress={this.keyPressed}\r\n                        placeholder=\"Where?\"\r\n                        value={this.state.location}\r\n                    />\r\n                </div>\r\n                <div className=\"SearchBar-submit\">\r\n                    <button onClick={this.handleSearch}>Let's Go</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default SearchBar;\r\n","const apiKey =\r\n    \"Mu0hh-1a4vC7VhodH8jmQ0r5fdnIjR1ADm72FI_hVKv9QoYGvFw_O35xHPX54bSAv7hlu70I4H7r98H69ba2-J7nhJDhnSCKjRe3udeHNEO88Carh4xn5ObfEKF9YHYx\";\r\n\r\nconst Yelp = {\r\n    search(term, location, sortBy) {\r\n        return fetch(`https://api.yelp.com/v3/businesses/search?term=${term}&location=${location}&sort_by=${sortBy}`, {\r\n            headers: {\r\n                Authorization: `Bearer ${apiKey}`,\r\n            },\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n            })\r\n            .then((jsonResponse) => {\r\n                if (jsonResponse.businesses) {\r\n                    return jsonResponse.businesses.map((business) => {\r\n                        return {\r\n                            id: business.id,\r\n                            imageSrc: business.image_url,\r\n                            name: business.name,\r\n                            address: business.location.address1,\r\n                            city: business.location.city,\r\n                            state: business.location.state,\r\n                            zipCode: business.location.zip_code,\r\n                            category: business.categories.title,\r\n                            rating: business.rating,\r\n                            reviewCount: business.review_count,\r\n                            url: business.url,\r\n                        };\r\n                    });\r\n                }\r\n            });\r\n    },\r\n};\r\n\r\nexport default Yelp;\r\n","import React from 'react';\nimport './App.css';\nimport BusinessList from '../BusinessList/BusinessList';\nimport SearchBar from '../SearchBar/SearchBar';\nimport Yelp from './../../util/Yelp';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tbusinesses: []\n\t\t};\n\n\t\tthis.searchYelp = this.searchYelp.bind(this);\n\t}\n\n\t//runs ascyn request 'search' from Yelp.js then updates business state\n\tsearchYelp = (term, location, sortBy) => {\n\t\tYelp.search(term, location, sortBy).then((businesses) => {\n\t\t\tthis.setState({ businesses: businesses });\n\t\t});\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>ravenous</h1>\n\t\t\t\t<SearchBar searchYelp={this.searchYelp} />\n\t\t\t\t<BusinessList businesses={this.state.businesses} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}